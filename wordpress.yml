AWSTemplateFormatVersion: 2010-09-09

Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  DBName:
    Default: wordpress
    Description: The WordPress database name
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBUser:
    NoEcho: 'true'
    Description: The WordPress database admin account username
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBPassword:
    NoEcho: 'true'
    Description: The WordPress database admin account password
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16

  Subnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: 'ap-southeast-1a'
      CidrBlock: 10.0.0.0/24

  Subnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: 'ap-southeast-1b'
      CidrBlock: 10.0.1.0/24

  IGW:
    Type: 'AWS::EC2::InternetGateway'

  IGWAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref IGW
  RouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC

  Route:
    Type: 'AWS::EC2::Route'
    DependsOn: IGWAttachment
    Properties:
       RouteTableId:
         Ref: RouteTable
       DestinationCidrBlock: 0.0.0.0/0
       GatewayId:
         Ref: IGW
  Subnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref Subnet1
      RouteTableId: !Ref RouteTable
  Subnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref Subnet2
      RouteTableId: !Ref RouteTable
  
  RDSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: RDS Secruity Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          CidrIp: 10.0.0.0/16

  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH access and HTTP access on the inbound port
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: '0.0.0.0/0'
      VpcId: !Ref VPC

  RDS:
    Type: "AWS::RDS::DBInstance"
    Properties: 
      AllocatedStorage: "20"
      DBInstanceClass: "db.t2.micro"
      DBName: !Ref DBName
      Engine: MySQL
      EngineVersion: "5.7.22"
      MasterUserPassword: !Ref DBPassword
      MasterUsername: !Ref DBUser
      DBSubnetGroupName: !Ref myDBSubnetGroup
      VPCSecurityGroups: 
        - !Ref RDSSecurityGroup
      Tags: 
        - 
          Key: Name
          Value: "My SQL Database"
  myDBSubnetGroup: 
    Properties: 
      DBSubnetGroupDescription: "DB subnet group"
      SubnetIds: 
        - !Ref Subnet1
        - !Ref Subnet2
    Type: "AWS::RDS::DBSubnetGroup"

  ApplicationLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    DependsOn: RDS
    Properties:
      SecurityGroups: 
        - !Ref InstanceSecurityGroup
      Subnets: 
        - !Ref Subnet1
        - !Ref Subnet2
  ALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    DependsOn: RDS
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: '80'
      Protocol: HTTP
  ALBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    DependsOn: RDS
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref VPC

  WebServerGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    DependsOn: RDS
    Properties:
      VPCZoneIdentifier: 
        - !Ref Subnet1
        - !Ref Subnet2
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: '1'
      MaxSize: '4'
      TargetGroupARNs:
        - !Ref ALBTargetGroup

  LaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    DependsOn: RDS
    Properties:
      AssociatePublicIpAddress: true
      ImageId: ami-048a01c78f7bae4aa
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - "#!/bin/sh \n"
            - "sudo yum install -y httpd mariadb-server mysql \n"
            - "sudo amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2 \n"
            - "sudo systemctl start httpd \n"
            - "sudo systemctl enable httpd \n"
            - "wget https://wordpress.org/latest.tar.gz \n"
            - "tar -xzf latest.tar.gz \n"
            - "cp wordpress/wp-config-sample.php wordpress/wp-config.php \n"
            - "sed -i \"/DB_NAME/s/database_name_here/wordpress/g\" wordpress/wp-config.php \n"
            - "sed -i \"/DB_USER/s/username_here/admin/g\" wordpress/wp-config.php \n"
            - "sed -i \"/DB_PASSWORD/s/password_here/12345678/g\" wordpress/wp-config.php \n"
            - "sudo cp -r wordpress/* /var/www/html/ \n"
            - "sudo sed -i \"151s/None/All/g\" /etc/httpd/conf/httpd.conf \n"
            - "sudo systemctl restart httpd \n"
            - sudo sed -i "/DB_HOST/s/'localhost'/'
            - !GetAtt RDS.Endpoint.Address
            - |
              '/g" /var/www/html/wp-config.php
            - "\n"
            - "sudo systemctl restart httpd \n"
            
Outputs:
  URL:
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt 
          - ApplicationLoadBalancer
          - DNSName
